# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: CI/CD

on:
  push:
    branches:
      - develop

permissions:
  contents: read

jobs:
  DOCKER_BUILD_PUSH:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

#    - name: Add application-db.properties
#      run: |
#        touch ./src/main/resources/application-db.properties
#        echo "${{ secrets.DB_PROPERTIES }}" > ./src/main/resources/application-db.properties

    - name: create-json
      id: create-json
      uses: jsdaniell/create-json@v1.2.3
      with:
        name: "firebase-secret.json"
        json: ${{ secrets.FIREBASE_SECRET }}
        dir: './src/main/resources/'

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Chmod Gradlew
      run: chmod +x ./gradlew

    - name: Build with Gradle
      run: ./gradlew build -x test

    - name: Initialize Known Hosts
      run: |
        mkdir -p ~/.ssh
        touch ~/.ssh/known_hosts
        ssh-keyscan ${{ secrets.HOST }} >> ~/.ssh/known_hosts

    - name: Set Permissions for Private Key
      run: |
        echo "${{ secrets.SSH_KEY }}" > $HOME/key.pem
        chmod 400 $HOME/key.pem

    - name: Copy files to EC2 instance
      run: |
        scp -i $HOME/key.pem ./build/libs/statement-0.0.1-SNAPSHOT.jar ${{ secrets.USERNAME }}@${{ secrets.HOST }}:/root/app/build/libs

#    - name: Set up SSH key
#      uses: webfactory/ssh-agent@v0.5.3
#      with:
#        ssh-private-key: ${{ secrets.SSH_KEY }}
#
#    - name: Copy JAR file to server
#      run: scp -i ${{ secrets.SSH_KEY }} build/libs/statement-0.0.1-SNAPSHOT.jar ${{ secrets.USERNAME }}@${{ secrets.HOST }}:/root/app/build/libs

#    - name: Build and push Docker image
#      run: |
#        docker buildx build --platform linux/arm64,linux/amd64 -t 2tory/mars5_statement:latest-arm64 -t 2tory/mars5_statement:latest-amd64 --file Dockerfile . --push

  Deploy:
    runs-on: ubuntu-latest
    needs: DOCKER_BUILD_PUSH
    steps:
    - name: executing remote ssh commands using ssh key
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.PORT }}
        script: |
          sudo sh /root/restart.sh core-server
#          sudo docker stop statement
#          sudo docker rm statement
#          sudo docker rmi 2tory/mars5_statement:latest-amd64
#          sudo docker run -d -p 8080:8080 --name statement -v /root/statement:/log --restart always 2tory/mars5_statement:latest-amd64
#          sudo docker network connect maria_default statement
